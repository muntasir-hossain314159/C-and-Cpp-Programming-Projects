/*
Question 01. More stats: 
The program allows the user to compute the student ID number and score for the best, closest to average, and weakest student.
*/
//Ahmed Muntasir Hossain - 09/08/2020

#include <stdio.h>
#include <math.h>
#include <float.h>

#define N 100 //maximum number of students in the data file

//input student ID number and score for that particular student
void get_data(int student_id_array[], double scores[], int num_students);

//compute mean and variance for all the scores
void stats(double scores[], int num_students, double *meanp, double *variancep);
//compute and return the student ID number and score for the best student
void max_score(double scores[], int num_students, double *high_scorep, int *high_score_indexp);
//compute and return the student ID number and score for the weakest student
void min_score(double scores[], int num_students, double *low_scorep, int *low_score_indexp);
//compute and return the student ID number and score for the closest to average student
void closest_to_avg(double scores[], int num_students, double mean, double *closest_to_avg_scorep, int *closest_to_avg_indexp);

//output the student ID number and scores for the best, closest to average, and weakest student
void print_data(int student_id_array[], double high_score, int high_score_index, double low_score, int low_score_index, double closest_to_avg_score, int closest_to_avg_index);

int main() 
{
  //parallel arrays:
  int student_id_array[N]; //array consisting of the ID number of the students
  double scores[N]; //array consisting of the scores of the students

  int num_students; //number of students in the datafile
  double mean; //mean of the scores
  double variance; //variance of the scores
  double std_dev; //standard deviation of the scores

  double high_score; //best score in the data file
  /*
  array index of the highest score in the data file. 
  The index corresponds to the same index of the student with the score, in the student_id_array.
  */
  int high_score_index;

  double low_score; //lowest score in the data file
  /*
  array index of the lowest score in the data file. 
  The index corresponds to the same index of the student with the score, in the student_id_array.
  */
  int low_score_index;

  double closest_to_avg_score; //score that is closest to the mean
  /*
  array index of the score that is closest to the mean. 
  The index corresponds to the same index of the student with the score, in the student_id_array.
  */
  int closest_to_avg_index;

  for(;;) //prompts the user to input the number of students in the data file
  {
  printf("\nEnter the number of students: ");
  scanf("%d", &num_students);
  if(num_students >= 2 && num_students <= 100) 
    break;
  printf("Error: %d is out of legal range. Please try again.\n", num_students); //shows error message, if input is not in range
  }

  get_data(student_id_array, scores, num_students); //calls get_data() function

  stats(scores, num_students, &mean, &variance); //calls stats() function
  std_dev = sqrt(variance); //compute standard deviation = square root (variance)

  max_score(scores, num_students, &high_score, &high_score_index); //calls max_score() function
  min_score(scores, num_students, &low_score, &low_score_index); //calls min_score() function
  closest_to_avg(scores, num_students, mean, &closest_to_avg_score, &closest_to_avg_index); //calls closest_to_avg() function

  //calls print_data() function and prints the statistical data computed 
  print_data(student_id_array, high_score, high_score_index, low_score, low_score_index, closest_to_avg_score, closest_to_avg_index);

  return 0;
}

void get_data(int student_id_array[], double scores[], int num_students)
{
  printf("\nEnter student ID and the respective score for the student when prompted:\n");

  for(int i=0; i<num_students; i++) //prompts the user to enter the student ID number and score for that particular student
  {
    printf("\n%2d. Enter student ID: ", i+1);
    scanf("%d", &student_id_array[i]);
    printf("    Enter student score: ");
    scanf("%lg", &scores[i]);
  }
}

void stats(double scores[], int num_students, double *meanp, double *variancep)
{
  int i;
  double sum=0;
  double local_mean;
  int divisor;

  for(i=0; i<num_students; i++) //calculates the mean score, and assigns its value to the mean variable via a pointer
  {
    sum+=scores[i];
  }
  *meanp = local_mean = sum/num_students;

  //calculates the variance of the scores, and assigns its value to the variance variable via a pointer
  sum = 0;
  for(i=0; i<num_students; i++) 
  {
    sum+=pow((scores[i]-local_mean), 2);
  }
  divisor = num_students;
  if(num_students < 20)
    divisor = num_students-1;
  *variancep = sum/divisor;
}

void max_score(double scores[], int num_students, double *high_scorep, int *high_score_indexp)
{
  *high_scorep = scores[0]; //initializes high score value
  *high_score_indexp = 0;   //initializes high score index
  
  //changes high score value and index, if the current iteration score is greater than high score value
  for(int i=0; i<num_students; i++) 
  {
    if(scores[i] > *high_scorep)
    {
      *high_scorep = scores[i];
      *high_score_indexp = i;
    }
  }
}

void min_score(double scores[], int num_students, double *low_scorep, int *low_score_indexp)
{
  *low_scorep = scores[0]; //initializes low score value 
  *low_score_indexp = 0;   //initializes low score index

  //changes low score value and index, if the current iteration score is lower than low score value
  for(int i=0; i<num_students; i++)
  {
    if(scores[i] < *low_scorep)
    {
      *low_scorep = scores[i];
      *low_score_indexp = i;
    }
  }
}

void closest_to_avg(double scores[], int num_students, double mean, double *closest_to_avg_scorep, int *closest_to_avg_indexp)
{
  int i;
  double smallest_difference = DBL_MAX; //initializes smallest difference to the largest possible value within double range
  
  //iterates through all the values, and checks whether the difference between the score and mean is the smallest possible value
  for(i=0; i<num_students; i++)
  {
    //checks whether the difference between the current score and the mean is lower than the smallest possible difference 
    if(fabs(scores[i]-mean) < smallest_difference) 
    {
      smallest_difference = fabs(scores[i] - mean);
      *closest_to_avg_scorep = scores[i];
      *closest_to_avg_indexp = i;
    }
  }
}

void print_data(int student_id_array[], double high_score, int high_score_index, double low_score, int low_score_index, double closest_to_avg_score, int closest_to_avg_index)
{
  printf("\nStudent ID number of the student with the Maximum Score: %d\n", student_id_array[high_score_index]);
  printf("Maximum Score: %.2f\n", high_score);
  
  printf("\nStudent ID number of the student with the Closest to the Average Score: %d\n", student_id_array[closest_to_avg_index]);
  printf("Closest to Average Score: %.2f\n", closest_to_avg_score);

  printf("\nStudent ID number of the student with the Minimum Score: %d\n", student_id_array[low_score_index]);
  printf("Minimum Score: %.2f\n", low_score);
}

