/*
Question 2. Class average and more: 
The program calculates and prints the mean, variance, standard deviation, highest exam score, lowest exam score,
and the coefficient of variation.
*/
//Ahmed Muntasir Hossain - 09/09/2020

#include <stdio.h>
#include <math.h>
#define N 100 //N is the maximum number of exam scores that the scores[] array can hold

void get_data(double scores[], int num_score); //prompts the user to input exam scores

//computes mean, variance, highest score, lowest score, and median of the exam scores in the data file
void stats(double scores[], int num_score, double *meanp, double *variancep, double *high_scorep, double *low_scorep, double *medianp); 
void sort(double scores[], int num_score); //sorts the array in ascending order

//prints the statistical data for the exam scores
void print_data(double mean, double variance, double std_dev, double high_score, double low_score, double median, double cv);

int main() 
{
  int num; //number of exam scores in the data file
  double scores[N]; //array that would store the exam scores inputted by the user
  double mean; //mean of the exam scores
  double variance; //variance of the exam scores
  double std_dev; //standard deviation in the exam scores
  double high_score; //highest score in the data file
  double low_score; //lowest score in the data file
  double median; //meadian exam score
  double cv; //coefficient of variation

  printf("\nCalculating statistics for exam scores:\n");

  /*
  prompts the user to enter the number of exam scores in the data file. 
  Check whether the number is within legal range (2..100). Asks the user to re-enter value if the number is out of range.
  */
  do 
  {
  printf("\nEnter the number of exam scores in the data file (2...100): ");
  scanf("%d", &num);

  if(num<2 || num>100)
    printf("Error:  %d is out of legal range, try again.\n", num);
  }
  while(num<2 || num>100);

  get_data(scores, num); //calls get_data() function

  stats(scores, num, &mean, &variance, &high_score, &low_score, &median); //calls stats() function
  std_dev = sqrt(variance); //computes standard deviation of the exam scores = square root (variance)
  cv = std_dev/mean; //computes coefficient of variation = standard deviation / mean

  print_data(mean, variance, std_dev, high_score, low_score, median, cv); //calls print_data() function
 
  return 0;
}

void get_data(double scores[], int num_score)
{
    printf("\nEnter exam score when prompted: \n");
    for(int i=0; i<num_score; i++) //iterates and prompts the user to input exam score
    {
      printf("Exam Score %3d. = ", i+1);
      scanf("%lg", &scores[i]);
    }
}

void stats(double scores[], int num_score, double *meanp, double *variancep, double *high_scorep, double *low_scorep, double *medianp)
{
  int i; //index of the scores[] array
  double sum = 0; //sum for computinng mean and variance
  double local_mean; //local variable 'mean' = mean of the exam scores
  double divisor; //divisor = number of exam scores in the data file
  double max_score, min_score; //maximum and minimum exam score
  int position; //index of the scores[array] for computing median

  /*  
  Compute Mean exam score:
  Iterates and sums the exam scores in the array. Computes mean = sum / number of exam scores in the data file.
  Assigns mean value to *meanp pointer to store the value in the memory location of the argument 'mean' in main()
  */
  for(i=0; i<num_score; i++) 
  {
    sum += scores[i];
  }
  *meanp = local_mean = sum / num_score;

  /*  
  Compute Variance of the exam scores:
  Iterates and sums the squared difference between each exam score and mean in the array. Computes variance = sum / divisor. 
  Assigns variance value to *variancep pointer to store the value in the memory location of the argument 'variance' in main()
  */
  sum = 0;
  for(i=0; i<num_score; i++)
  {
    sum += pow((scores[i]-local_mean), 2);
  }
  divisor = num_score; //divisor = number of exam scores, if the number is greater than or equal to 20
  if(num_score < 20)
    divisor = num_score - 1; //else, divisor = number of exam scores - 1
  *variancep = sum / divisor;

  //Compute Maximum and Minimum Score:
  max_score = min_score = scores[0]; //initialize maximum and minimum score to the first element of the scores[] array
  
  //iterates and checks whether the current exam score is greater than the maximum score and lower than the minimum score
  for(i=0; i<num_score; i++) 
  {
      if(scores[i] > max_score)
        max_score = scores[i];
        
      if(scores[i] < min_score)
        min_score = scores[i];
  }
  //assigns maximum score to *high_scorep pointer to store the value in the memory location of the argument 'high_score' in main()
  *high_scorep = max_score; 
  //assigns minimum score to *low_scorep pointer to store the value in the memory location of the argument 'low_score' in main()
  *low_scorep = min_score;

  //Compute Median exam score:
  sort(scores, num_score); //calls sort() function to arrange the elements in the scores[] array in ascending order
  
  /*
  position of the median is the middle element, if the number of total elements are odd, and it is the average of the two middle values, if the total number of elements are even.
  */
  position = num_score/2;  
  if(num_score%2==0)
    *medianp = (scores[position-1] + scores[position])/2;
  else
    *medianp = scores[position];
}

void sort(double scores[], int num_score)
{
  int i;
  double temp; //temporarily stores values during swaps

  for(int j=num_score; j>=2 ; j--) //iterates so as to sort the whole array in ascending order
  {
    for(i=0; i<num_score-1; i++) //sorts through the whole array and places the largest element at the very end
    {
      if(scores[i] > scores[i+1])
      {
        temp = scores[i];
        scores[i] = scores[i+1];
        scores[i+1] = temp;
      }
    }
  }
}

void print_data(double mean, double variance, double std_dev, double high_score, double low_score, double median, double cv)
{
  printf("\nStatistical Data:\n"); //prints statistical data computed in main() and stats() functions
  printf("1. Mean Exam Score: %.2f\n", mean);
  printf("2. Variance of the Exam Scores: %.2f\n", variance);
  printf("3. Standard Deviation of the Exam Scores: %.2f\n", std_dev);
  printf("4. Highest Exam Score: %.2f\n", high_score);
  printf("5. Lowest Exam Score: %.2f\n", low_score);
  printf("6. Median Exam Score: %.2f\n", median);
  printf("7. Coefficient of Varriation: %.2f\n", cv);
}

